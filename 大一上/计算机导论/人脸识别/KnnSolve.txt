%使用该程序时，注意将.m文件拖动到FERET_80的文件夹中，然后运行时记得先创建一个脚本，在脚本中运行

clc;
%搭建knn框架
K=3;%KNN中的K值
knnsolve(testData,trainData,test_label,train_label,K);

function knnsolve(testData,trainData,test_label,train_label,K)
%初始化
error=0;
[n,m]=size(testData);
[~,M]=size(trainData);

%存储距离
for k=1:m
    dist=zeros(M,1);
    for j=1:M
        Dist=0;
        for i=1:n
            Dist=Dist+abs(testData(i,k)-trainData(i,j));
        end
        dist(j,1)=Dist;
    end
%距离排序
[~,A]=sort(dist);
%顺序下对应属于类别
for i=1:M
    A(i,1)=train_label(1,A(i,1));
end
%存储前K个数据对应的类别
B=[];
for i=1:K
    B=[B,A(i,1)];
end
%避免极端情况（图像质量过低，识别度低，导致的K个数据的类别不同）
[a,b]=mode(B);
if b==1
    a=B(1,1);
end
%赋予机器识别的类别到test_label中
test_label(2,k)=a;
if test_label(2,k)~=test_label(1,k)
    error=error+1;
end
%输出局部结果
fprintf('该真实分类为%d  ',test_label(1,k));
fprintf('机器学习分类为%d\n',test_label(2,k));
end
%计算正确率，输出最终结果
Right=(m-error)/m*100;
fprintf('正确率为：%.2f%%',Right);
end